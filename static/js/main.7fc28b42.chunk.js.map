{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberofEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","toggle","this","setState","prevState","event","props","id","className","onClick","toggleDetails","Component","EventList","events","map","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberofEvents","numberEventsInput","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yPAiCeA,E,4MA7BbC,MAAQ,CACNC,OAAS,G,mDAGX,WACEC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BH,QAASG,EAAUH,a,oBAIvB,WACE,IAAQI,EAAUH,KAAKI,MAAfD,MAER,OACE,sBAAKE,GAAOF,EAAME,GAAIC,UAAU,QAAhC,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,kBACf,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,sBAEjB,wBAAQA,UAAU,iBAAiBC,QAAUP,KAAKQ,kBACpCR,KAAKF,MAAMC,OAAU,OAAS,OAC1C,qBAAKO,UAAU,sC,GAxBLG,aCoBLC,E,4JAfb,WACE,IAAQC,EAAWX,KAAKI,MAAhBO,OACR,OACE,oBAAIL,UAAU,YAAd,SACGK,EAAOC,KAAI,SAAAT,GAAK,OACf,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADPA,EAAME,a,GAPDI,aC0CTI,E,4MAzCXf,MAAQ,CACJgB,MAAQ,GACRC,YAAc,I,EAGlBC,mBAAqB,SAACb,GAClB,IAAMc,EAAQd,EAAMe,OAAOD,MACrBF,EAAc,EAAKX,MAAMe,UAAUC,QAAO,SAACC,GAC7C,OAAOA,EAASC,cAAcC,QAAQN,EAAMK,gBAAkB,KAGlE,EAAKrB,SAAS,CACVa,MAAOG,EACPF,iB,EAIRS,kBAAoB,SAACC,GACjB,EAAKxB,SAAS,CACVa,MAAOW,K,4CAIf,WAAU,IAAD,OACL,OACI,sBAAKnB,UAAU,aAAf,UACI,uBAAOoB,KAAK,OAAOpB,UAAU,OAAOW,MAAOjB,KAAKF,MAAMgB,MAAOa,SAAU3B,KAAKgB,qBAC5E,qBAAIV,UAAU,cAAd,UACMN,KAAKF,MAAMiB,YAAYH,KAAI,SAACa,GAAD,OACzB,oBAAqBlB,QAAS,kBAAM,EAAKiB,kBAAkBC,IAA3D,SAAyEA,GAAhEA,MAEb,6BACI,gDADI,iB,GAjCHhB,aCwBVmB,E,4MAtBX9B,MAAQ,CACJ+B,kBAAoB,I,EAGxBb,mBAAqB,SAACb,GAClB,IAAMc,EAAQd,EAAMe,OAAOD,MAE3B,EAAKhB,SAAS,CACV4B,kBAAmBZ,K,4CAI3B,WACI,OACI,qBAAKX,UAAU,iBAAf,SACI,uBAAOoB,KAAK,OAAOpB,UAAU,mBAAmBW,MAAOjB,KAAKF,MAAM+B,kBAAmBF,SAAU3B,KAAKgB,2B,GAjBvFP,aCgBdqB,E,4JAZb,WACE,OACE,sBAAKxB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAPUG,aCMEsB,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.7fc28b42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n\r\n  state = {\r\n    toggle : 0\r\n  }\r\n\r\n  toggleDetails(){\r\n    this.setState(prevState => ({\r\n      toggle: !prevState.toggle\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n    let showHide;\r\n    return (\r\n      <div id = { event.id} className=\"event\" >\r\n        <div className=\"event-preview\">\r\n          <div className=\"event-summary\"></div>\r\n          <div className=\"event-location\"></div>\r\n          <div className=\"event-dateTime\"></div>\r\n        </div>\r\n        <button className=\"toggle-details\" onClick={ this.toggleDetails() }></button>\r\n        { showHide = (this.state.toggle) ? \"show\" : \"hide\" }\r\n          <div className=\"event-details {`showHide`}\"></div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Event;","//src/EventList.js\r\n\r\nimport React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default EventList;","// src/CitySearch.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n\r\n    state = {\r\n        query : '', //or Munich or whatever, it should still pass\r\n        suggestions : []\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        const suggestions = this.props.locations.filter((location) => {\r\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n        });\r\n        \r\n        this.setState({\r\n            query: value,\r\n            suggestions\r\n        });\r\n    }\r\n\r\n    handleItemClicked = (suggestion) => {\r\n        this.setState({\r\n            query: suggestion\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <input type=\"text\" className=\"city\" value={this.state.query} onChange={this.handleInputChanged} />\r\n                <ul className=\"suggestions\">\r\n                    { this.state.suggestions.map((suggestion) => (\r\n                        <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\r\n                    ))}\r\n                    <li key=\"all\">\r\n                        <b>See all cities</b>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CitySearch","// src/CitySearch.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass NumberofEvents extends Component {\r\n\r\n    state = {\r\n        numberEventsInput : 32 //or Munich or whatever, it should still pass\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        \r\n        this.setState({\r\n            numberEventsInput: value,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"NumberofEvents\">\r\n                <input type=\"text\" className=\"eventNumberInput\" value={this.state.numberEventsInput} onChange={this.handleInputChanged} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default NumberofEvents","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberofEvents from './NumberofEvents';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch />\r\n        <EventList />\r\n        <NumberofEvents />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}